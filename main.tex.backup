
\documentclass[11pt,fleqn]{book} % Default font size and left-justified equations

%----------------------------------------------------------------------------------------

\input{structure} % Insert the commands.tex file which contains the majority of the structure behind the template



%%agregué


\usepackage[hang, small,labelfont=bf,up,textfont=it,up]{caption} % Custom captions under/above floats in tables or figures
\usepackage{booktabs} % Horizontal rules in tables
\usepackage{float} % Required for tables and figures in the multi-column environment - they
\usepackage{listings}




\usepackage{graphicx} % paquete que permite introducir imágenes

\usepackage{booktabs} % Horizontal rules in tables
\usepackage{float} % Required for tables and figures in the multi-column environment - they

\numberwithin{equation}{section} % Number equations within sections (i.e. 1.1, 1.2, 2.1, 2.2 instead of 1, 2, 3, 4)
\numberwithin{figure}{section} % Number figures within sections (i.e. 1.1, 1.2, 2.1, 2.2 instead of 1, 2, 3, 4)
\numberwithin{table}{section} % Number tables within sections (i.e. 1.1, 1.2, 2.1, 2.2 instead of 1, 2, 3, 4)


\setlength\parindent{0pt} % Removes all indentation from paragraphs - comment this line for an assignment with lots of text

%%hasta aquí


\begin{document}

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\begingroup
\thispagestyle{empty}
\begin{tikzpicture}[remember picture,overlay]
\coordinate [below=12cm] (midpoint) at (current page.north);
\node at (current page.north west)
{\begin{tikzpicture}[remember picture,overlay]
\node[anchor=north west,inner sep=0pt] at (0,0) {\includegraphics[width=\paperwidth]{background}}; % Background image
\draw[anchor=north] (midpoint) node [fill=ocre!30!white,fill opacity=0.6,text opacity=1,inner sep=1cm]{\Huge\centering\bfseries\sffamily\parbox[c][][t]{\paperwidth}{\centering Dokumentation zu Quiddi-github\\[15pt] % Book title
%{\Large }\\[20pt] % Subtitle
{\huge Quiddi}}}; % Author name
\end{tikzpicture}};
\end{tikzpicture}
\vfill
\endgroup


%----------------------------------------------------------------------------------------
%	COPYRIGHT PAGE
%----------------------------------------------------------------------------------------

%\newpage
%~\vfill
%\thispagestyle{empty}

%\noindent Copyright \copyright\ 2013 John Smith\\ % Copyright notice

%\noindent \textsc{Published by Publisher}\\ % Publisher

%\noindent \textsc{book-website.com}\\ % URL

%\noindent Licensed under the Creative Commons Attribution-NonCommercial 3.0 Unported License (the ``License''). You may not use this file except in compliance with the License. You may obtain a copy of the License at \url{http://creativecommons.org/licenses/by-nc/3.0}. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \textsc{``as is'' basis, without warranties or conditions of any kind}, either express or implied. See the License for the specific language governing permissions and limitations under the License.\\ % License information

%\noindent \textit{First printing, March 2013} % Printing/edition date

%----------------------------------------------------------------------------------------
%	TABLE OF CONTENTS
%----------------------------------------------------------------------------------------

%\chapterimage{ima1} % Table of contents heading image

\chapterimage{chapter_head_1.pdf} % Table of contents heading image

%\pagestyle{empty} % No headers

 \tableofcontents % Print the table of contents itself
\newpage
%\cleardoublepage % Forces the first chapter to start on an odd page so it's on the right

%\pagestyle{fancy} % Print headers again

%----------------------------------------------------------------------------------------
%	PART
%----------------------------------------------------------------------------------------

\chapter{Kurzbeschreibungen}
\textbf{ESP8266}\\
Hier wird ein Webserver auf einem ESP-12S aufgesetzt mit der Entwicklungsumgebung des Arduino.\\
\textbf{Kleinanzeigen}\\
Eine Suchmaschine für eBay Kleinanzeigen, welche mit dem Suchfilter ein neues html-Dokument erzeugt.
\chapter{Dokumentationen}
\section{ESP8266}
\textbf{Software:}\\
\begin{itemize}
 \item Software für Arduino
 \item Bibliothek für die ESP8266, bekannt unter dem Namen ´´ESP8266wifi''. Dieser Ordner muss in den Ordner ´´libraries'' im Installationsordner der Arduino-Entwicklungsumgebung hineinkopiert werden.
\end{itemize}
\textbf{Hardware:\\}
\includegraphics[width=8cm]{Pictures/DSC01317.jpg}\\
Um das Programm zu übertragen wurde der oben dargestellte Adapter verwendet. Nachteil ist, dass der Reset nicht vom Adapter kontorlliert werden kann. Deshlab muss ein ResetKnopf angebracht werden und dieser von Hand im richtigen Moment gedrückt werden (Weiteres siehe unten).
\begin{itemize}
 \item Herzstück: ESP-12S
 \item Betriebsspannung: 3,3V manche USB/TTL Adapter liefern nicht genügend Strom. Es empfiehlt sich eine seperable Spannungsquelle mit 3,3V zu benutzen.
\end{itemize}
Anschluss des ESP-12S:\\
\newpage
Anschlüsse des ESP-12S von hinten:\\
\includegraphics[width=3cm]{Pictures/esp-12s.jpg}\\
Diese sollten dann folgendermaßen verkabelt werden. Die Entstörkkondensatoren und Pull-UP/Down Widerstände wurden weggelassen. Funktioniert hatte es trotzdem. Weiter ist zu beachten, dass der RX des USB/TTL-Adapters auf TX am ESP-12S geht und umgekehrt.\\
\includegraphics[width=12cm]{Pictures/espwiring.jpg}\\
Danach wird die ArduinoEntwicklungsumgebung gestartet, es wird folgendes eingestellt:
\begin{itemize}
 \item Board: NodeMCU 1.0, um dies auswählen zu können muss man in der ArduinoEntwicklungsumgebung auf Werkzeuge/Board/Boardverwalter gehen, dort bei Suchen ´´ESP8266'' eingeben und ´´esp8266 by esp8266 Community'' installieren.
 \item Baudrate: 115200
\end{itemize}
Danach kann man den Sketch kompilieren. Um ihn zu übertragen muss man auf den Button ´´Kompilieren mit Upload'' drücken. Dies ist der Button mit dem Pfeil. Nachdem die Kompilierung abgeschlossen ist und bevor die ArduinoEntwicklungsumgebung mit dem Upload beginnt muss am ESP-12S der Reset- und der FlashKnopf gleichzeitig gedrückt werden. Den Resetknopf gleich wieder loslassen und kurze Zeit später (vll. ca 1 sek) den Flashknopf auch wieder loslassen. Nun startet der Upload. Nach dem Upload startet die Software auf dem ESP erst nach einem Reset des ESP. Mit Werkzeuge/Serieller Monitor kann man nun den Output der Seriellen Ausgabe sehen. Bitte hier die Baudrate richtig anpassen. Im Quellcode für den ESP-12S ist es hier auf 115200 gestellt. Mein Adapter sah so aus:\\
\includegraphics[width=5cm]{Pictures/DSC01318.jpg}\\ \\
\textbf{\color{red}31.3.2018 Authentifizierung mit geschalteten Ausgängen und DHCP\color{black}}\\
Änderung: Hier wurden Pin 4 und 5 auf Ausgang geschalten und diese mit einer Zugangssperre geschützt. Bei Schalten der Ausgänge wird nun jedes mal ein Benutzername abgefragt.\\
Um die Webseite darzustellen hatte sich nun etwas verändert. Mit
\begin{lstlisting}
 void make_html()
\end{lstlisting}
wird in die String-Variable \grqq content\grqq \ der html-Code für die Webseite geschrieben. Die Funktion zum checken, welcher Link der Seite offen ist wird mit
\begin{lstlisting}
server.on("/4/on",.....)
\end{lstlisting}
gemacht. In diesem Beispiel die Seite \textbf{IP/4/on}. Der ausführbare Code wird meist mit einer $\lambda$-Funktion übergeben. In dem Falle hier wird mit einer if-Abfrage geschaut, ob die Zugangsdaten passen. Bei Korrekter Eingabe wird in den String \grqq output4State \grqq \ der aktuelle Zustand geschrieben und Pin 4 auf HIGH geschalten. Danach wird mit \grqq make\_html();\grqq \ der String für die HTML erzeugt und dieser mit \grqq server.send(200, "text/html", content);\grqq \ ausgegeben. Die Funktion \grqq server.on("/4/on",.....) \grqq \ wird für jeden Seitenaufruf geschrieben. Also insgesamt 5 Stück, Hauptseite, 4 an, 4 aus, 5 an, 5 aus.
\section{Kleinanzeigen}
Die eBay-Kleinanzeigen Suchmaschine wurde in C\# geschrieben und liese in der Artikelbeschreibung ein Wort aus nach welchem gesucht wird. Um C\#-Programme in Linux zu kompilieren muss man mono installiert haben. Es wird dann mit
\begin{lstlisting}
csc hello.cs
\end{lstlisting}
kompiliert. Dies generiert eine exe-Datei. Diese wird mit
\begin{lstlisting}
mono hello.exe
\end{lstlisting}
ausgeführt. Das Programm frägt zuerst nach der URL von eBay-Kleinanzeigen, danach wird gefragt wie viele Artikel sich auf einer SEite befinden. Dies sind momentan (Stand 21.3.2018) 27 Artikel pro Seite. Danach wird gefragt wie viele Seiten durchsucht werden sollen, dies kann bei vielen Seiten lange dauern. Als letztes wird der Suchbegriff verlangt. Danach startet das Programm. Es erzeugt eine html-Datei, welche zum Schluß geöffnet werden muss um die bearbeiteten Anzeigen anzeigen zu können.
%----------------------------------------------------------------------------------------

\end{document}